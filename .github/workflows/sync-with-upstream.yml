name: Sync with Upstream

# Controls when the workflow will run
on:
#   schedule:
#     - cron: '0 0 * * 1'  # Runs every Monday 00:00 UTC

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  sync:
    strategy:
      matrix:
        include:
          # The fork repo provided needs to be in the {owner}/{repo} format
          - fork_repo: yusuf-musleh/tester-repo
            fork_release: open-release/cool.1
            upstream_repo: https://github.com/tester-org-1/tester-repo
            upstream_master: main
  
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.SYNC_GH_ACTIONS_PAT }} 
      # The fork repo provided needs to be in the {owner}/{repo} format
#       FORK_REPO: yusuf-musleh/tester-repo  # TODO: do not hardcode
#       FORK_RELEASE: open-release/cool.1
#       UPSTREAM_REPO: https://github.com/tester-org-1/tester-repo  # TODO: do not hardcode
#       UPSTREAM_MASTER: main

    steps:
      - name: Get and store current datetime stamp
        id: current-datetime-stamp
        run: echo "DATE_TIME_STAMP=$(date +'%Y%m%d-%s')" >> "$GITHUB_OUTPUT"
      - name: Construct and store sync branch name
        id: sync-branch
        run: echo "SYNC_BRANCH=sync-${{ matrix.upstream_master }}-${{ steps.current-datetime-stamp.outputs.DATE_TIME_STAMP }}" >> "$GITHUB_OUTPUT"
      - name: Configure git to use GitHub Cli for credentials
        run: gh auth setup-git -h github.com
      - name: Checkout Forked Repo
        uses: actions/checkout@v3
        with:
          repository: ${{ matrix.fork_repo }}
          token: ${{ env.GITHUB_TOKEN }}
          ref: ${{ matrix.fork_release }}
      - name: Add Remote Upstream
        run: git remote add upstream ${{ matrix.upstream_repo }}
      - name: Fetch Latest from Upstream
        run: git fetch upstream
      - name: Create a new branch off Upstream master
        run: git checkout -b ${{ steps.sync-branch.outputs.SYNC_BRANCH }} upstream/${{ matrix.upstream_master }}
      - name: Check for changes Upstream
        id: check-sync-required
#         run: if [[ $(git log origin/${{ steps.sync-branch-outputs.SYNC_BRANCH }} ^origin/${{ matrix.fork_release }} | wc -l) -gt 0 ]]; then echo "SHOULD PUSH AND CREATE PR"; else echo "DO NOT PUSH"; fi
#         run: echo "SYNC_REQUIRED=$(git log ${{ steps.sync-branch.outputs.SYNC_BRANCH }} ^${{ matrix.fork_release }} | grep -q . && echo true)" >> "$GITHUB_OUTPUT"
        run: |
          echo "sync_required=$(git diff ${{ matrix.fork_release }}.. | grep -q . && echo true)"
          if [[ $sync_required == true ]]; then echo "SYNC_REQUIRED=$sync_required" >> "$GITHUB_OUTPUT"; else echo "No new changes. Skipping the next steps..."; fi
      - name: Push new branch to Fork
        if: ${{ steps.check-sync-required.outputs.SYNC_REQUIRED }}
        run: git push origin
      - name: Create PR on Fork with latest changes from Upstream
        if: ${{ steps.check-sync-required.outputs.SYNC_REQUIRED }}
        run: >
          gh pr create
          --repo ${{ matrix.fork_repo }}
          --base ${{ matrix.fork_release }}
          --head $(git branch --show-current)
          --title "Sync ${{ matrix.fork_release }} with Upstream ${{ steps.current-datetime-stamp.outputs.DATE_TIME_STAMP }}"
          --body '
          Syncing ${{ matrix.fork_release }} with Upstream

          ## Conflicts ⚠️ 
          
          In cases of conflicts you can go ahead and resolve it here on Github if it is simple enough.
          However if it is a more complicated conflict please follow the steps below:

            1. Check out `sync-${{ matrix.upstream_master }}-${{ steps.current-datetime-stamp.outputs.DATE_TIME_STAMP }}` locally:
            2. Pull latest changes from `${{ matrix.fork_release }}` into that branch, make sure your `[REMOTE]` is pointing to `${{ matrix.fork_release }}`:
            ```sh
            git pull [REMOTE] ${{ matrix.fork_release }}
            ```
            3. Resolve the conflicts locally then commit the result, this will create a new merge commit
            4. Push the new merge commit to `${{ steps.sync-branch.outputs.SYNC_BRANCH }}` to update this PR
            5. Review the PR again and merge when ready!'
